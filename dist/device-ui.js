/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var Device;
(function (Device) {
    Device.windowLocationHref = function () {
        return window.location.href;
    };
    Device.windowLocationHostname = function () {
        return window.location.hostname;
    };
    function uriParam(name) {
        var url = Device.windowLocationHref();
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
        var results = regex.exec(url);
        return results == null ? null : results[1];
    }
    Device.uriParam = uriParam;
    Device.cloudUriParam = 'cloudUri';
    function cloudletApiBase() {
        var cloudUriFromParam = uriParam(Device.cloudUriParam);
        var uri = cloudUriFromParam == null ? Device.windowLocationHostname() : cloudUriFromParam;
        return 'http://' + uri + ':15000';
    }
    Device.cloudletApiBase = cloudletApiBase;
    function geofencingCloudletApiBase() {
        return cloudletApiBase() + '/geofencing';
    }
    Device.geofencingCloudletApiBase = geofencingCloudletApiBase;
    function deviceCloudletApiBase() {
        return cloudletApiBase();
    }
    Device.deviceCloudletApiBase = deviceCloudletApiBase;
    function deviceManagementCloudletFailure(scope) {
        scope.flash = 'Cannot connect to the Device Management Cloudlet.';
        scope.isDeviceManagementCloudletConnected = false;
    }
    Device.deviceManagementCloudletFailure = deviceManagementCloudletFailure;
})(Device || (Device = {}));

var Devices;
(function (Devices) {
    Devices.pluginName = "cloudlet-device";
    Devices.log = Logger.get(Devices.pluginName);
    Devices.templatePath = "plugins/example/html";
})(Devices || (Devices = {}));

var Devices;
(function (Devices) {
    Devices._module = angular.module(Devices.pluginName, []);
    var tab = undefined;
    Devices._module.config(["$locationProvider", "$routeProvider", "HawtioNavBuilderProvider", function ($locationProvider, $routeProvider, builder) {
        tab = builder.create().id(Devices.pluginName).title(function () { return "Devices"; }).href(function () { return "/devices"; }).subPath("Devices", "devices", builder.join(Devices.templatePath, "devices.html")).build();
        builder.configureRouting($routeProvider, tab);
        $locationProvider.html5Mode(true);
    }]);
    Devices._module.run(["HawtioNav", function (HawtioNav) {
        HawtioNav.add(tab);
        Devices.log.debug("loaded");
    }]);
    hawtioPluginLoader.addModule(Devices.pluginName);
})(Devices || (Devices = {}));

var Devices;
(function (Devices) {
    Devices.RoutesController = Devices._module.controller("Devices.RoutesController", ["$scope", "$http", "$route", "$interval", function ($scope, $http, $route, $interval) {
        $scope.imagesPrefix = window.location.port === '2772' ? 'images' : 'libs/cloudlet-device/images';
        $scope.updateDevicesList = function () {
            $http.get(Device.deviceCloudletApiBase() + '/device/disconnected').success(function (data, status, headers, config) {
                $scope.disconnectedDevices = data.disconnectedDevices;
                $http.get(Device.deviceCloudletApiBase() + '/device').success(function (data, status, headers, config) {
                    $scope.isDeviceManagementCloudletConnected = true;
                    $scope.devices = data.devices;
                }).error(function (data, status, headers, config) {
                    Device.deviceManagementCloudletFailure($scope);
                });
            }).error(function (data, status, headers, config) {
                Device.deviceManagementCloudletFailure($scope);
            });
        };
        $scope.updateDevicesList();
        $interval($scope.updateDevicesList, 1000);
        $scope.sendHeartbeat = function (deviceId) {
            $http.get(Device.deviceCloudletApiBase() + '/device/' + deviceId + '/heartbeat').success(function (data, status, headers, config) {
                Devices.log.debug('Heartbeat sent to the device ' + deviceId + '.');
                $scope.updateDevicesList();
            }).error(function (data, status, headers, config) {
                Device.deviceManagementCloudletFailure($scope);
            });
        };
        $scope.deregister = function (deviceId) {
            $http.delete(Device.deviceCloudletApiBase() + '/device/' + deviceId).success(function (data, status, headers, config) {
                Devices.log.debug('Device ' + deviceId + ' deregistered.');
                $scope.updateDevicesList();
            }).error(function (data, status, headers, config) {
                Device.deviceManagementCloudletFailure($scope);
            });
        };
        $scope.createVirtualDevice = function (deviceId) {
            var device = { clientId: deviceId };
            $http.post(Device.deviceCloudletApiBase() + '/client', device).success(function (data, status, headers, config) {
                Devices.log.debug('New virtual device ' + deviceId + ' has been created.');
                $scope.newDeviceId = '';
                $scope.updateDevicesList();
            }).error(function (data, status, headers, config) {
                Device.deviceManagementCloudletFailure($scope);
            });
        };
    }]);
})(Devices || (Devices = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluY2x1ZGVzLmpzIiwiZXhhbXBsZS90cy9nZW9mZW5jaW5nLnRzIiwiZXhhbXBsZS90cy9leGFtcGxlR2xvYmFscy50cyIsImV4YW1wbGUvdHMvZGV2aWNlc1BsdWdpbi50cyIsImV4YW1wbGUvdHMvZGV2aWNlcy50cyJdLCJuYW1lcyI6WyJEZXZpY2UiLCJEZXZpY2UudXJpUGFyYW0iLCJEZXZpY2UuY2xvdWRsZXRBcGlCYXNlIiwiRGV2aWNlLmdlb2ZlbmNpbmdDbG91ZGxldEFwaUJhc2UiLCJEZXZpY2UuZGV2aWNlQ2xvdWRsZXRBcGlCYXNlIiwiRGV2aWNlLmRldmljZU1hbmFnZW1lbnRDbG91ZGxldEZhaWx1cmUiLCJEZXZpY2VzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FDY0EsSUFBTyxNQUFNLENBdUNaO0FBdkNELFdBQU8sTUFBTSxFQUFDLENBQUM7SUFFQUEseUJBQWtCQSxHQUFHQTtRQUM1QixNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDaEMsQ0FBQyxDQUFDQTtJQUVTQSw2QkFBc0JBLEdBQUdBO1FBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUNwQyxDQUFDLENBQUNBO0lBRUZBLFNBQWdCQSxRQUFRQSxDQUFDQSxJQUFJQTtRQUN6QkMsSUFBSUEsR0FBR0EsR0FBR0EsTUFBTUEsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxDQUFDQTtRQUN0Q0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsRUFBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsRUFBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDMURBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLE1BQU1BLENBQUVBLFFBQVFBLEdBQUNBLElBQUlBLEdBQUNBLFdBQVdBLENBQUVBLENBQUNBO1FBQ3BEQSxJQUFJQSxPQUFPQSxHQUFHQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFF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SSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTTtnQkFDeEMsTUFBTSxDQUFDLCtCQUErQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ25ELENBQUMsQ0FDSixDQUFDO1FBQ04sQ0FBQyxDQUFDQTtJQUNOQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUVOQSxDQUFDQSxFQWxFTSxPQUFPLEtBQVAsT0FBTyxRQWtFYiIsImZpbGUiOiJjb21waWxlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyBDb3B5cmlnaHQgMjAxNC0yMDE1IFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzXG4vLy8gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBhcyBpbmRpY2F0ZWQgYnkgdGhlIEBhdXRob3IgdGFncy5cbi8vL1xuLy8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy8vXG4vLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vL1xuLy8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2xpYnMvaGF3dGlvLXV0aWxpdGllcy9kZWZzLmQudHNcIi8+XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmNsdWRlcy5qcy5tYXAiLCIvLy8gQ29weXJpZ2h0IDIwMTQtMjAxNSBSZWQgSGF0LCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlc1xuLy8vIGFuZCBvdGhlciBjb250cmlidXRvcnMgYXMgaW5kaWNhdGVkIGJ5IHRoZSBAYXV0aG9yIHRhZ3MuXG4vLy9cbi8vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vL1xuLy8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vLy9cbi8vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxubW9kdWxlIERldmljZSB7XG5cbiAgICBleHBvcnQgdmFyIHdpbmRvd0xvY2F0aW9uSHJlZiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgfTtcblxuICAgIGV4cG9ydCB2YXIgd2luZG93TG9jYXRpb25Ib3N0bmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lO1xuICAgIH07XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gdXJpUGFyYW0obmFtZSkge1xuICAgICAgICB2YXIgdXJsID0gRGV2aWNlLndpbmRvd0xvY2F0aW9uSHJlZigpO1xuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sXCJcXFxcXFxbXCIpLnJlcGxhY2UoL1tcXF1dLyxcIlxcXFxcXF1cIik7XG4gICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoIFwiW1xcXFw/Jl1cIituYW1lK1wiPShbXiYjXSopXCIgKTtcbiAgICAgICAgdmFyIHJlc3VsdHMgPSByZWdleC5leGVjKCB1cmwgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHMgPT0gbnVsbCA/IG51bGwgOiByZXN1bHRzWzFdO1xuICAgIH1cblxuICAgIGV4cG9ydCB2YXIgY2xvdWRVcmlQYXJhbSA9ICdjbG91ZFVyaSc7XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gY2xvdWRsZXRBcGlCYXNlKCkge1xuICAgICAgICB2YXIgY2xvdWRVcmlGcm9tUGFyYW0gPSB1cmlQYXJhbShjbG91ZFVyaVBhcmFtKTtcbiAgICAgICAgdmFyIHVyaSA9IGNsb3VkVXJpRnJvbVBhcmFtID09IG51bGwgPyB3aW5kb3dMb2NhdGlvbkhvc3RuYW1lKCkgOiBjbG91ZFVyaUZyb21QYXJhbTtcbiAgICAgICAgcmV0dXJuICdodHRwOi8vJyArIHVyaSArICc6MTUwMDAnO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZW9mZW5jaW5nQ2xvdWRsZXRBcGlCYXNlKCkge1xuICAgICAgICByZXR1cm4gY2xvdWRsZXRBcGlCYXNlKCkgKyAnL2dlb2ZlbmNpbmcnO1xuICAgIH1cblxuICAgIGV4cG9ydCBmdW5jdGlvbiBkZXZpY2VDbG91ZGxldEFwaUJhc2UoKSB7XG4gICAgICAgIHJldHVybiBjbG91ZGxldEFwaUJhc2UoKTtcbiAgICB9XG5cbiAgICBleHBvcnQgZnVuY3Rpb24gZGV2aWNlTWFuYWdlbWVudENsb3VkbGV0RmFpbHVyZShzY29wZSkge1xuICAgICAgICBzY29wZS5mbGFzaCA9ICdDYW5ub3QgY29ubmVjdCB0byB0aGUgRGV2aWNlIE1hbmFnZW1lbnQgQ2xvdWRsZXQuJztcbiAgICAgICAgc2NvcGUuaXNEZXZpY2VNYW5hZ2VtZW50Q2xvdWRsZXRDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbn1cbiIsIi8vLyBDb3B5cmlnaHQgMjAxNC0yMDE1IFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzXG4vLy8gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBhcyBpbmRpY2F0ZWQgYnkgdGhlIEBhdXRob3IgdGFncy5cbi8vL1xuLy8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy8vXG4vLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vL1xuLy8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiZ2VvZmVuY2luZy50c1wiLz5cbm1vZHVsZSBEZXZpY2VzIHtcblxuICBleHBvcnQgdmFyIHBsdWdpbk5hbWUgPSBcImNsb3VkbGV0LWRldmljZVwiO1xuXG4gIGV4cG9ydCB2YXIgbG9nOiBMb2dnaW5nLkxvZ2dlciA9IExvZ2dlci5nZXQocGx1Z2luTmFtZSk7XG5cbiAgZXhwb3J0IHZhciB0ZW1wbGF0ZVBhdGggPSBcInBsdWdpbnMvZXhhbXBsZS9odG1sXCI7XG5cbn1cbiIsIi8vLyBDb3B5cmlnaHQgMjAxNC0yMDE1IFJlZCBIYXQsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzXG4vLy8gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyBhcyBpbmRpY2F0ZWQgYnkgdGhlIEBhdXRob3IgdGFncy5cbi8vL1xuLy8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy8vXG4vLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vL1xuLy8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vaW5jbHVkZXMudHNcIi8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiZXhhbXBsZUdsb2JhbHMudHNcIi8+XG5tb2R1bGUgRGV2aWNlcyB7XG5cbiAgZXhwb3J0IHZhciBfbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoRGV2aWNlcy5wbHVnaW5OYW1lLCBbXSk7XG5cbiAgdmFyIHRhYiA9IHVuZGVmaW5lZDtcblxuICBfbW9kdWxlLmNvbmZpZyhbXCIkbG9jYXRpb25Qcm92aWRlclwiLCBcIiRyb3V0ZVByb3ZpZGVyXCIsIFwiSGF3dGlvTmF2QnVpbGRlclByb3ZpZGVyXCIsXG4gICAgKCRsb2NhdGlvblByb3ZpZGVyLCAkcm91dGVQcm92aWRlcjogbmcucm91dGUuSVJvdXRlUHJvdmlkZXIsIGJ1aWxkZXI6IEhhd3Rpb01haW5OYXYuQnVpbGRlckZhY3RvcnkpID0+IHtcbiAgICB0YWIgPSBidWlsZGVyLmNyZWF0ZSgpXG4gICAgICAuaWQoRGV2aWNlcy5wbHVnaW5OYW1lKVxuICAgICAgLnRpdGxlKCgpID0+IFwiRGV2aWNlc1wiKVxuICAgICAgLmhyZWYoKCkgPT4gXCIvZGV2aWNlc1wiKVxuICAgICAgLnN1YlBhdGgoXCJEZXZpY2VzXCIsIFwiZGV2aWNlc1wiLCBidWlsZGVyLmpvaW4oRGV2aWNlcy50ZW1wbGF0ZVBhdGgsIFwiZGV2aWNlcy5odG1sXCIpKVxuICAgICAgLmJ1aWxkKCk7XG4gICAgYnVpbGRlci5jb25maWd1cmVSb3V0aW5nKCRyb3V0ZVByb3ZpZGVyLCB0YWIpO1xuICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcbiAgfV0pO1xuXG4gIF9tb2R1bGUucnVuKFtcIkhhd3Rpb05hdlwiLCAoSGF3dGlvTmF2OiBIYXd0aW9NYWluTmF2LlJlZ2lzdHJ5KSA9PiB7XG4gICAgSGF3dGlvTmF2LmFkZCh0YWIpO1xuICAgIGxvZy5kZWJ1ZyhcImxvYWRlZFwiKTtcbiAgfV0pO1xuXG5cbiAgaGF3dGlvUGx1Z2luTG9hZGVyLmFkZE1vZHVsZShEZXZpY2VzLnBsdWdpbk5hbWUpO1xufVxuIiwiLy8vIENvcHlyaWdodCAyMDE0LTIwMTUgUmVkIEhhdCwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXNcbi8vLyBhbmQgb3RoZXIgY29udHJpYnV0b3JzIGFzIGluZGljYXRlZCBieSB0aGUgQGF1dGhvciB0YWdzLlxuLy8vXG4vLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLy9cbi8vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8vXG4vLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJkZXZpY2VzUGx1Z2luLnRzXCIvPlxubW9kdWxlIERldmljZXMge1xuXG4gIGV4cG9ydCB2YXIgUm91dGVzQ29udHJvbGxlciA9IF9tb2R1bGUuY29udHJvbGxlcihcIkRldmljZXMuUm91dGVzQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCIkaHR0cFwiLCBcIiRyb3V0ZVwiLCBcIiRpbnRlcnZhbFwiLCAoJHNjb3BlLCAkaHR0cCwgJHJvdXRlLCAkaW50ZXJ2YWwpID0+IHtcbiAgICAgICRzY29wZS5pbWFnZXNQcmVmaXggPSB3aW5kb3cubG9jYXRpb24ucG9ydCA9PT0gJzI3NzInID8gJ2ltYWdlcycgOiAnbGlicy9jbG91ZGxldC1kZXZpY2UvaW1hZ2VzJztcblxuICAgICAgJHNjb3BlLnVwZGF0ZURldmljZXNMaXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJGh0dHAuZ2V0KERldmljZS5kZXZpY2VDbG91ZGxldEFwaUJhc2UoKSArICcvZGV2aWNlL2Rpc2Nvbm5lY3RlZCcpLlxuICAgICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzY29ubmVjdGVkRGV2aWNlcyA9IGRhdGEuZGlzY29ubmVjdGVkRGV2aWNlcztcbiAgICAgICAgICAgICAgICAgICRodHRwLmdldChEZXZpY2UuZGV2aWNlQ2xvdWRsZXRBcGlCYXNlKCkgKyAnL2RldmljZScpLlxuICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzRGV2aWNlTWFuYWdlbWVudENsb3VkbGV0Q29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRldmljZXMgPSBkYXRhLmRldmljZXM7XG4gICAgICAgICAgICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgRGV2aWNlLmRldmljZU1hbmFnZW1lbnRDbG91ZGxldEZhaWx1cmUoJHNjb3BlKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICBEZXZpY2UuZGV2aWNlTWFuYWdlbWVudENsb3VkbGV0RmFpbHVyZSgkc2NvcGUpO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgfTtcblxuICAgICAgJHNjb3BlLnVwZGF0ZURldmljZXNMaXN0KCk7XG4gICAgICAkaW50ZXJ2YWwoJHNjb3BlLnVwZGF0ZURldmljZXNMaXN0LCAxMDAwKTtcblxuICAgICAgJHNjb3BlLnNlbmRIZWFydGJlYXQgPSBmdW5jdGlvbihkZXZpY2VJZCkge1xuICAgICAgICAgICRodHRwLmdldChEZXZpY2UuZGV2aWNlQ2xvdWRsZXRBcGlCYXNlKCkgKyAnL2RldmljZS8nICsgZGV2aWNlSWQgKyAnL2hlYXJ0YmVhdCcpLlxuICAgICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICBsb2cuZGVidWcoJ0hlYXJ0YmVhdCBzZW50IHRvIHRoZSBkZXZpY2UgJyArIGRldmljZUlkICsgJy4nKTtcbiAgICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVEZXZpY2VzTGlzdCgpO1xuICAgICAgICAgICAgICB9KS5cbiAgICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgIERldmljZS5kZXZpY2VNYW5hZ2VtZW50Q2xvdWRsZXRGYWlsdXJlKCRzY29wZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgJHNjb3BlLmRlcmVnaXN0ZXIgPSBmdW5jdGlvbihkZXZpY2VJZCkge1xuICAgICAgICAgICRodHRwLmRlbGV0ZShEZXZpY2UuZGV2aWNlQ2xvdWRsZXRBcGlCYXNlKCkgKyAnL2RldmljZS8nICsgZGV2aWNlSWQpLlxuICAgICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICBsb2cuZGVidWcoJ0RldmljZSAnICsgZGV2aWNlSWQgKyAnIGRlcmVnaXN0ZXJlZC4nKTtcbiAgICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVEZXZpY2VzTGlzdCgpO1xuICAgICAgICAgICAgICB9KS5cbiAgICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgIERldmljZS5kZXZpY2VNYW5hZ2VtZW50Q2xvdWRsZXRGYWlsdXJlKCRzY29wZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgJHNjb3BlLmNyZWF0ZVZpcnR1YWxEZXZpY2UgPSBmdW5jdGlvbihkZXZpY2VJZCkge1xuICAgICAgICAgIHZhciBkZXZpY2UgPSB7Y2xpZW50SWQ6IGRldmljZUlkfTtcbiAgICAgICAgICAkaHR0cC5wb3N0KERldmljZS5kZXZpY2VDbG91ZGxldEFwaUJhc2UoKSArICcvY2xpZW50JywgZGV2aWNlKS5cbiAgICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKCdOZXcgdmlydHVhbCBkZXZpY2UgJyArIGRldmljZUlkICsgJyBoYXMgYmVlbiBjcmVhdGVkLicpO1xuICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0RldmljZUlkID0gJyc7XG4gICAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlRGV2aWNlc0xpc3QoKTtcbiAgICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICBEZXZpY2UuZGV2aWNlTWFuYWdlbWVudENsb3VkbGV0RmFpbHVyZSgkc2NvcGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgIH07XG4gIH1dKTtcblxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
angular.module("device-ui-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/example/html/devices.html","<!--\n Licensed to the Camel Labs under one or more\n contributor license agreements.  See the NOTICE file distributed with\n this work for additional information regarding copyright ownership.\n The licenses this file to You under the Apache License, Version 2.0\n (the \"License\"); you may not use this file except in compliance with\n the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n<div class=\"row\">\n    <div class=\"col-md-12\" ng-controller=\"Devices.RoutesController\">\n        <p ng-show=\"flash\"><i class=\"fa fa-info-circle\"> {{flash}}</i></p>\n\n        <div ng-show=\"isDeviceManagementCloudletConnected\">\n\n        <h2>Devices registered in the cloud</h2>\n        <p>\n            <table>\n            <tr>\n                <td>\n            <input type=\"text\" ng-model=\"newDeviceId\" />\n                </td>\n                <td>\n                    <button ng-disabled=\"newDeviceId === nil || newDeviceId.length === 0\" class=\"btn\" ng-click=\"createVirtualDevice(newDeviceId)\">\n                Create virtual device\n            </button>\n                </td>\n            </tr>\n        </table>\n        </p>\n        <p>\n\n            <table ng-show=\"devices.length > 0\">\n                <tr ng-repeat=\"device in devices\">\n                    <td style=\"padding-right: 10px;padding-bottom: 10px;\">\n                        <i ng-show=\"!disconnectedDevices.contains(device.endpoint)\" class=\"fa fa-heart\"> {{device.endpoint}}</i>\n                        <i ng-show=\"disconnectedDevices.contains(device.endpoint)\" class=\"fa fa-heart-o\"> {{device.endpoint}}</i>\n                    </td>\n                    <td style=\"padding-right: 10px;padding-bottom: 10px;\">\n                        <button class=\"btn\" ng-click=\"deregister(device.endpoint)\">\n                            Deregister\n                        </button>\n                    </td>\n                    <td style=\"padding-right: 10px;padding-bottom: 10px;\">\n                        <button class=\"btn\" ng-click=\"sendHeartbeat(device.endpoint)\">\n                            Send heartbeat\n                        </button>\n                    </td>\n                </tr>\n            </table>\n\n            <div ng-show=\"devices.length === 0\">\n                No devices registered in the cloud. Use our\n                <a href=\"https://github.com/rhiot/rhiot/blob/master/docs/readme.md#device-management-rest-api\">REST</a>\n                or <a href=\"https://github.com/rhiot/rhiot/blob/master/docs/readme.md#accessing-lwm2m-server-directly\">LWM2M</a>\n                APIs to connect your devices.\n                <br>\n                You can also create the virtual device using the form above - just give it\n                the unique name!\n            </div>\n        </p>\n        </div>\n    </div>\n</div>\n");}]); hawtioPluginLoader.addModule("device-ui-templates");