/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var Geofencing;
(function (Geofencing) {
    Geofencing.windowLocationHref = function () {
        return window.location.href;
    };
    Geofencing.windowLocationHostname = function () {
        return window.location.hostname;
    };
    function uriParam(name) {
        var url = Geofencing.windowLocationHref();
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
        var results = regex.exec(url);
        return results == null ? null : results[1];
    }
    Geofencing.uriParam = uriParam;
    Geofencing.cloudUriParam = 'cloudUri';
    function cloudletApiBase() {
        var cloudUriFromParam = uriParam(Geofencing.cloudUriParam);
        var uri = cloudUriFromParam == null ? Geofencing.windowLocationHostname() : cloudUriFromParam;
        return 'http://' + uri + ':15001/api';
    }
    Geofencing.cloudletApiBase = cloudletApiBase;
    function geofencingCloudletApiBase() {
        return cloudletApiBase() + '/geofencing';
    }
    Geofencing.geofencingCloudletApiBase = geofencingCloudletApiBase;
    function documentCloudletApiBase() {
        return cloudletApiBase() + '/document';
    }
    Geofencing.documentCloudletApiBase = documentCloudletApiBase;
})(Geofencing || (Geofencing = {}));

var Devices;
(function (Devices) {
    Devices.pluginName = "cloudlet-device";
    Devices.log = Logger.get(Devices.pluginName);
    Devices.templatePath = "plugins/example/html";
})(Devices || (Devices = {}));

var Devices;
(function (Devices) {
    Devices._module = angular.module(Devices.pluginName, []);
    var tab = undefined;
    Devices._module.config(["$locationProvider", "$routeProvider", "HawtioNavBuilderProvider", function ($locationProvider, $routeProvider, builder) {
        tab = builder.create().id(Devices.pluginName).title(function () { return "Devices"; }).href(function () { return "/devices"; }).subPath("Devices", "devices", builder.join(Devices.templatePath, "devices.html")).build();
        builder.configureRouting($routeProvider, tab);
        $locationProvider.html5Mode(true);
    }]);
    Devices._module.run(["HawtioNav", function (HawtioNav) {
        HawtioNav.add(tab);
        Devices.log.debug("loaded");
    }]);
    hawtioPluginLoader.addModule(Devices.pluginName);
})(Devices || (Devices = {}));

var Devices;
(function (Devices) {
    Devices.RoutesController = Devices._module.controller("Devices.RoutesController", ["$scope", "$http", "$route", function ($scope, $http, $route) {
        $scope.loadRoutes = function () {
            $http.get(Geofencing.geofencingCloudletApiBase() + '/routes/routes/' + $scope.selectedOption.id).success(function (data, status, headers, config) {
                $scope.routes = data.routes.map(function (val) {
                    var routeTimestamp = new Date(val.created);
                    var timestamp = (routeTimestamp.getMonth() + 1) + "-" + routeTimestamp.getDate() + "-" + routeTimestamp.getFullYear() + ' ' + routeTimestamp.getHours() + ":" + routeTimestamp.getMinutes() + ":" + routeTimestamp.getSeconds();
                    return {
                        name: timestamp,
                        id: val.id
                    };
                });
                if (data.routes.length > 0) {
                    $scope.selectedRoute = $scope.routes[0];
                    $scope.routeSelected();
                }
            }).error(function (data, status, headers, config) {
                $scope.flash = 'Cannot connect to the geofencing service.';
            });
        };
        $scope.clientSelected = function () {
            $scope.client = $scope.selectedOption.id;
            $scope.routesExportLink = Geofencing.geofencingCloudletApiBase() + '/routes/export/' + $scope.client + '/xls';
            $scope.loadRoutes();
        };
        $scope.routeSelected = function () {
            $http.get(Geofencing.geofencingCloudletApiBase() + '/routes/routeUrl/' + $scope.selectedRoute.id).success(function (data, status, headers, config) {
                $scope.routeUrl = data.routeUrl;
                $scope.loadRouteComments();
            }).error(function (data, status, headers, config) {
                $scope.flash = 'Cannot connect to the geofencing service.';
            });
        };
        $http.get(Geofencing.geofencingCloudletApiBase() + '/routes/clients').success(function (data, status, headers, config) {
            $scope.clients = data.clients.map(function (val) {
                return {
                    name: val,
                    id: val
                };
            });
            if (data.clients.length > 0) {
                $scope.selectedOption = $scope.clients[0];
                $scope.clientSelected();
            }
        }).error(function (data, status, headers, config) {
            $scope.flash = 'Cannot connect to the geofencing service.';
        });
        $scope.addComment = function () {
            $http.post(Geofencing.cloudletApiBase() + '/document/save/RouteComment', { routeId: $scope.selectedRoute.id, text: $scope.newComment, created: new Date().getTime() }).success(function (data, status, headers, config) {
                $scope.loadRouteComments();
                $scope.flash = 'New comment has been added to the route.';
            }).error(function (data, status, headers, config) {
                $scope.flash = 'There was problem with adding comment to the route.';
            });
        };
        $scope.loadRouteComments = function () {
            $http.post(Geofencing.cloudletApiBase() + '/document/findByQuery/RouteComment', { page: 0, size: 100, orderBy: ['created'], sortAscending: -1, query: { routeIdIn: [$scope.selectedRoute.id] } }).success(function (data, status, headers, config) {
                $scope.routeComments = data;
            }).error(function (data, status, headers, config) {
                $scope.flash = 'There was problem reading route comments.';
            });
        };
        $scope.deleteRoute = function () {
            $http.delete(Geofencing.geofencingCloudletApiBase() + '/routes/delete/' + $scope.selectedRoute.id);
            $route.reload();
        };
    }]);
})(Devices || (Devices = {}));

//# sourceMappingURL=data:application/json;base64,
angular.module("device-ui-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/example/html/devices.html","<!--\n Licensed to the Camel Labs under one or more\n contributor license agreements.  See the NOTICE file distributed with\n this work for additional information regarding copyright ownership.\n The licenses this file to You under the Apache License, Version 2.0\n (the \"License\"); you may not use this file except in compliance with\n the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n<div class=\"row\">\n    <div class=\"col-md-12\" ng-controller=\"Devices.RoutesController\">\n        <p ng-show=\"flash\">{{flash}}</p>\n\n        Show routes for <select ng-show=\"clients.length > 0\" data-ng-options=\"o.name for o in clients\"\n                data-ng-model=\"selectedOption\" ng-change=\"clientSelected()\"></select>\n\n        <p ng-show=\"clients.length == 0\">No clients in the database.</p>\n\n        <select ng-show=\"routes.length > 0\" ng-options=\"o.name for o in routes\"\n                data-ng-model=\"selectedRoute\" ng-change=\"routeSelected()\"></select>\n\n        <button class=\"btn\" ng-show=\"routes.length > 0\" ng-click=\"deleteRoute()\">\n            Delete route\n        </button>\n\n        <p ng-show=\"clients.length > 0\">\n            <a ng-href=\"{{routesExportLink}}\">Excel report for {{client}}</a>\n        </p>\n\n        <p ng-show=\"selectedRoute\">\n            <img ng-src=\"{{routeUrl}}\" />\n            <p>Route comments:</p>\n        <input type=\"text\" ng-model=\"newComment\"/>\n        <button class=\"btn\" ng-click=\"addComment()\">\n            New comment\n        </button>\n        <br>\n        <div ng-repeat=\"comment in routeComments\">\n            {{comment.text}} <br/>\n        </div>\n        </p>\n        <p ng-show=\"clients.length > 0 && routes.length == 0\">No routes for the given client.</p>\n    </div>\n</div>\n");}]); hawtioPluginLoader.addModule("device-ui-templates");