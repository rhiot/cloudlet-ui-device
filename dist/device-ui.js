/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var Device;
(function (Device) {
    Device.windowLocationHref = function () {
        return window.location.href;
    };
    Device.windowLocationHostname = function () {
        return window.location.hostname;
    };
    function uriParam(name) {
        var url = Device.windowLocationHref();
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
        var results = regex.exec(url);
        return results == null ? null : results[1];
    }
    Device.uriParam = uriParam;
    Device.cloudUriParam = 'cloudUri';
    function cloudletApiBase() {
        var cloudUriFromParam = uriParam(Device.cloudUriParam);
        var uri = cloudUriFromParam == null ? Device.windowLocationHostname() : cloudUriFromParam;
        return 'http://' + uri + ':15000';
    }
    Device.cloudletApiBase = cloudletApiBase;
    function geofencingCloudletApiBase() {
        return cloudletApiBase() + '/geofencing';
    }
    Device.geofencingCloudletApiBase = geofencingCloudletApiBase;
    function deviceCloudletApiBase() {
        return cloudletApiBase();
    }
    Device.deviceCloudletApiBase = deviceCloudletApiBase;
    function deviceManagementCloudletFailure(scope) {
        scope.flash = 'Cannot connect to the Device Management Cloudlet.';
        scope.isDeviceManagementCloudletConnected = false;
    }
    Device.deviceManagementCloudletFailure = deviceManagementCloudletFailure;
})(Device || (Device = {}));

var Devices;
(function (Devices) {
    Devices.pluginName = "cloudlet-device";
    Devices.log = Logger.get(Devices.pluginName);
    Devices.templatePath = "plugins/device/html";
})(Devices || (Devices = {}));

var Devices;
(function (Devices) {
    Devices._module = angular.module(Devices.pluginName, []);
    var tab = undefined;
    Devices._module.config(["$locationProvider", "$routeProvider", "HawtioNavBuilderProvider", function ($locationProvider, $routeProvider, builder) {
        tab = builder.create().id(Devices.pluginName).title(function () { return "Devices"; }).href(function () { return "/devices"; }).subPath("Devices", "devices", builder.join(Devices.templatePath, "devices.html")).build();
        builder.configureRouting($routeProvider, tab);
        $locationProvider.html5Mode(true);
    }]);
    Devices._module.run(["HawtioNav", function (HawtioNav) {
        HawtioNav.add(tab);
        Devices.log.debug("loaded");
    }]);
    hawtioPluginLoader.addModule(Devices.pluginName);
})(Devices || (Devices = {}));

var Devices;
(function (Devices) {
    Devices.RoutesController = Devices._module.controller("Devices.RoutesController", ["$scope", "$http", "$route", "$interval", function ($scope, $http, $route, $interval) {
        $scope.imagesPrefix = window.location.port === '2772' ? 'images' : 'libs/cloudlet-device/images';
        $scope.updateDevicesList = function () {
            $http.get(Device.deviceCloudletApiBase() + '/device/disconnected').success(function (data, status, headers, config) {
                $scope.disconnectedDevices = data.disconnectedDevices;
                $http.get(Device.deviceCloudletApiBase() + '/device').success(function (data, status, headers, config) {
                    $scope.isDeviceManagementCloudletConnected = true;
                    $scope.devices = data.devices;
                }).error(function (data, status, headers, config) {
                    Device.deviceManagementCloudletFailure($scope);
                });
            }).error(function (data, status, headers, config) {
                Device.deviceManagementCloudletFailure($scope);
            });
        };
        $scope.updateDevicesList();
        $interval($scope.updateDevicesList, 1000);
        $scope.sendHeartbeat = function (deviceId) {
            $http.get(Device.deviceCloudletApiBase() + '/device/' + deviceId + '/heartbeat').success(function (data, status, headers, config) {
                Devices.log.debug('Heartbeat sent to the device ' + deviceId + '.');
                $scope.updateDevicesList();
            }).error(function (data, status, headers, config) {
                Device.deviceManagementCloudletFailure($scope);
            });
        };
        $scope.deregister = function (deviceId) {
            $http.delete(Device.deviceCloudletApiBase() + '/device/' + deviceId).success(function (data, status, headers, config) {
                Devices.log.debug('Device ' + deviceId + ' deregistered.');
                $scope.updateDevicesList();
            }).error(function (data, status, headers, config) {
                Device.deviceManagementCloudletFailure($scope);
            });
        };
        $scope.createVirtualDevice = function (deviceId) {
            var device = { clientId: deviceId };
            $http.post(Device.deviceCloudletApiBase() + '/client', device).success(function (data, status, headers, config) {
                Devices.log.debug('New virtual device ' + deviceId + ' has been created.');
                $scope.newDeviceId = '';
                $scope.updateDevicesList();
            }).error(function (data, status, headers, config) {
                Device.deviceManagementCloudletFailure($scope);
            });
        };
    }]);
})(Devices || (Devices = {}));

//# sourceMappingURL=data:application/json;base64,
angular.module("device-ui-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/device/html/devices.html","<!--\n Licensed to the Camel Labs under one or more\n contributor license agreements.  See the NOTICE file distributed with\n this work for additional information regarding copyright ownership.\n The licenses this file to You under the Apache License, Version 2.0\n (the \"License\"); you may not use this file except in compliance with\n the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n<div class=\"row\">\n    <div class=\"col-md-12\" ng-controller=\"Devices.RoutesController\">\n        <p ng-show=\"flash\"><i class=\"fa fa-info-circle\"> {{flash}}</i></p>\n\n        <div ng-show=\"isDeviceManagementCloudletConnected\">\n\n        <h2>Devices registered in the cloud</h2>\n        <p>\n            <table>\n            <tr>\n                <td>\n            <input type=\"text\" ng-model=\"newDeviceId\" />\n                </td>\n                <td>\n                    <button ng-disabled=\"newDeviceId === nil || newDeviceId.length === 0\" class=\"btn\" ng-click=\"createVirtualDevice(newDeviceId)\">\n                Create virtual device\n            </button>\n                </td>\n            </tr>\n        </table>\n        </p>\n        <p>\n\n            <table ng-show=\"devices.length > 0\">\n                <tr ng-repeat=\"device in devices\">\n                    <td style=\"padding-right: 10px;padding-bottom: 10px;\">\n                        <i ng-show=\"!disconnectedDevices.contains(device.endpoint)\" class=\"fa fa-heart\"> {{device.endpoint}}</i>\n                        <i ng-show=\"disconnectedDevices.contains(device.endpoint)\" class=\"fa fa-heart-o\"> {{device.endpoint}}</i>\n                    </td>\n                    <td style=\"padding-right: 10px;padding-bottom: 10px;\">\n                        <button class=\"btn\" ng-click=\"deregister(device.endpoint)\">\n                            Deregister\n                        </button>\n                    </td>\n                    <td style=\"padding-right: 10px;padding-bottom: 10px;\">\n                        <button class=\"btn\" ng-click=\"sendHeartbeat(device.endpoint)\">\n                            Send heartbeat\n                        </button>\n                    </td>\n                </tr>\n            </table>\n\n            <div ng-show=\"devices.length === 0\">\n                No devices registered in the cloud. Use our\n                <a href=\"https://github.com/rhiot/rhiot/blob/master/docs/readme.md#device-management-rest-api\">REST</a>\n                or <a href=\"https://github.com/rhiot/rhiot/blob/master/docs/readme.md#accessing-lwm2m-server-directly\">LWM2M</a>\n                APIs to connect your devices.\n                <br>\n                You can also create the virtual device using the form above - just give it\n                the unique name!\n            </div>\n        </p>\n        </div>\n    </div>\n</div>\n");}]); hawtioPluginLoader.addModule("device-ui-templates");