/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var Geofencing;
(function (Geofencing) {
    Geofencing.windowLocationHref = function () {
        return window.location.href;
    };
    Geofencing.windowLocationHostname = function () {
        return window.location.hostname;
    };
    function uriParam(name) {
        var url = Geofencing.windowLocationHref();
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
        var results = regex.exec(url);
        return results == null ? null : results[1];
    }
    Geofencing.uriParam = uriParam;
    Geofencing.cloudUriParam = 'cloudUri';
    function cloudletApiBase() {
        var cloudUriFromParam = uriParam(Geofencing.cloudUriParam);
        var uri = cloudUriFromParam == null ? Geofencing.windowLocationHostname() : cloudUriFromParam;
        return 'http://' + uri + ':15000';
    }
    Geofencing.cloudletApiBase = cloudletApiBase;
    function geofencingCloudletApiBase() {
        return cloudletApiBase() + '/geofencing';
    }
    Geofencing.geofencingCloudletApiBase = geofencingCloudletApiBase;
    function documentCloudletApiBase() {
        return cloudletApiBase() + '/document';
    }
    Geofencing.documentCloudletApiBase = documentCloudletApiBase;
    function deviceCloudletApiBase() {
        return cloudletApiBase();
    }
    Geofencing.deviceCloudletApiBase = deviceCloudletApiBase;
})(Geofencing || (Geofencing = {}));

var Devices;
(function (Devices) {
    Devices.pluginName = "cloudlet-device";
    Devices.log = Logger.get(Devices.pluginName);
    Devices.templatePath = "plugins/example/html";
})(Devices || (Devices = {}));

var Devices;
(function (Devices) {
    Devices._module = angular.module(Devices.pluginName, []);
    var tab = undefined;
    Devices._module.config(["$locationProvider", "$routeProvider", "HawtioNavBuilderProvider", function ($locationProvider, $routeProvider, builder) {
        tab = builder.create().id(Devices.pluginName).title(function () { return "Devices"; }).href(function () { return "/devices"; }).subPath("Devices", "devices", builder.join(Devices.templatePath, "devices.html")).build();
        builder.configureRouting($routeProvider, tab);
        $locationProvider.html5Mode(true);
    }]);
    Devices._module.run(["HawtioNav", function (HawtioNav) {
        HawtioNav.add(tab);
        Devices.log.debug("loaded");
    }]);
    hawtioPluginLoader.addModule(Devices.pluginName);
})(Devices || (Devices = {}));

var Devices;
(function (Devices) {
    Devices.RoutesController = Devices._module.controller("Devices.RoutesController", ["$scope", "$http", "$route", function ($scope, $http, $route) {
        $scope.imagesPrefix = window.location.port == '2772' ? 'images' : 'libs/cloudlet-device/images';
        $http.get(Geofencing.deviceCloudletApiBase() + '/device/disconnected').success(function (data, status, headers, config) {
            $scope.disconnectedDevices = data.disconnectedDevices;
            $http.get(Geofencing.deviceCloudletApiBase() + '/device').success(function (data, status, headers, config) {
                $scope.devices = data.devices;
            }).error(function (data, status, headers, config) {
                $scope.flash = 'Cannot connect to the device service.';
            });
        }).error(function (data, status, headers, config) {
            $scope.flash = 'Cannot connect to the device service.';
        });
        $scope.loadRoutes = function () {
            $http.get(Geofencing.geofencingCloudletApiBase() + '/routes/routes/' + $scope.selectedOption.id).success(function (data, status, headers, config) {
                $scope.routes = data.routes.map(function (val) {
                    var routeTimestamp = new Date(val.created);
                    var timestamp = (routeTimestamp.getMonth() + 1) + "-" + routeTimestamp.getDate() + "-" + routeTimestamp.getFullYear() + ' ' + routeTimestamp.getHours() + ":" + routeTimestamp.getMinutes() + ":" + routeTimestamp.getSeconds();
                    return {
                        name: timestamp,
                        id: val.id
                    };
                });
                if (data.routes.length > 0) {
                    $scope.selectedRoute = $scope.routes[0];
                    $scope.routeSelected();
                }
            }).error(function (data, status, headers, config) {
                $scope.flash = 'Cannot connect to the geofencing service.';
            });
        };
        $scope.clientSelected = function () {
            $scope.client = $scope.selectedOption.id;
            $scope.routesExportLink = Geofencing.geofencingCloudletApiBase() + '/routes/export/' + $scope.client + '/xls';
            $scope.loadRoutes();
        };
        $scope.routeSelected = function () {
            $http.get(Geofencing.geofencingCloudletApiBase() + '/routes/routeUrl/' + $scope.selectedRoute.id).success(function (data, status, headers, config) {
                $scope.routeUrl = data.routeUrl;
                $scope.loadRouteComments();
            }).error(function (data, status, headers, config) {
                $scope.flash = 'Cannot connect to the geofencing service.';
            });
        };
        $scope.loadRouteComments = function () {
            $http.post(Geofencing.cloudletApiBase() + '/document/findByQuery/RouteComment', { page: 0, size: 100, orderBy: ['created'], sortAscending: -1, query: { routeIdIn: [$scope.selectedRoute.id] } }).success(function (data, status, headers, config) {
                $scope.routeComments = data;
            }).error(function (data, status, headers, config) {
                $scope.flash = 'There was problem reading route comments.';
            });
        };
        $scope.deleteRoute = function () {
            $http.delete(Geofencing.geofencingCloudletApiBase() + '/routes/delete/' + $scope.selectedRoute.id);
            $route.reload();
        };
    }]);
})(Devices || (Devices = {}));

//# sourceMappingURL=data:application/json;base64,
angular.module("device-ui-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("plugins/example/html/devices.html","<!--\n Licensed to the Camel Labs under one or more\n contributor license agreements.  See the NOTICE file distributed with\n this work for additional information regarding copyright ownership.\n The licenses this file to You under the Apache License, Version 2.0\n (the \"License\"); you may not use this file except in compliance with\n the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n<div class=\"row\">\n    <div class=\"col-md-12\" ng-controller=\"Devices.RoutesController\">\n        <p ng-show=\"flash\">{{flash}}</p>\n\n            <h2>Devices registered in the cloud</h2>\n\n        <p>\n            <table>\n            <tr ng-repeat=\"device in devices\">\n                    <td style=\"padding-right: 5px;padding-bottom: 5px\">\n                    <img ng-src=\"{{imagesPrefix}}/device-{{disconnectedDevices.contains(device.endpoint) ? \'offline\' : \'online\'}}.png\" width=\"25px\">\n                    </td>\n                    <td>\n                            {{device.endpoint}}\n                    </td>\n            </tr>\n    </table>\n        </p>\n    </div>\n</div>\n");}]); hawtioPluginLoader.addModule("device-ui-templates");